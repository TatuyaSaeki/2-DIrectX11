//===========================================================================
//!	@file	shape_3D.h
//! @brief	3D形状
//===========================================================================
#pragma once

//! 形状種類
enum class ShapeType3D : int
{
    None = 0,      //!< 初期化用
    Point,         //!< 点
    Sphare,        //!< 球
    Capsule,       //!< カプセル
    Line,          //!< 線
    LineSegment,   //!< 線分
    Plane,         //!< 平面
    Triangle,      //!< 三角ポリゴン
    Rectangle,     //!< 矩形面
    Box            //!< 箱
};

//===========================================================================
//! 3D形状基底
//===========================================================================
struct ShapeBase3D : public ShapeTypeBase
{
    //! @brief コンストラクタ
    ShapeBase3D();

    //-----------------------------------------------------------------------
    //! @brief  形状タイプ取得
    //! @return 自身の3D形状タイプ
    //-----------------------------------------------------------------------
    ShapeType3D getShapeType() const;

protected:
    //! 各コンストラクタで初期化
    ShapeType3D shapeType_;   //!< 自身の形状タイプ
};

//===========================================================================
//! 点
//===========================================================================
struct Point3D : public ShapeBase3D
{
    //! @brief コンストラクタ
    Point3D();

    //! @brief デストラクタ
    virtual ~Point3D() = default;

    //-----------------------------------------------------------------------
    //! @biref 位置設定
    //! @param [in] 設定したい位置
    //-----------------------------------------------------------------------
    void setPosition(const Vector3& position);

    //-----------------------------------------------------------------------
    //! @brief  位置取得
    //! @return 自身の位置
    //-----------------------------------------------------------------------
    Vector3 getPosition() const;

protected:
    Vector3 position_ = Vector3::ZERO;   //!< 位置
};

//===========================================================================
//! 球
//===========================================================================
struct Sphere3D : public Point3D
{
    //! @brief コンストラクタ
    Sphere3D();

    //-----------------------------------------------------------------------
    //! @brief コンストラクタ
    //! @param [in] position 位置
    //! @param [in] radius   半径
    //-----------------------------------------------------------------------
    Sphere3D(const Vector3& position, f32 radius);

    //-----------------------------------------------------------------------
    //! @brief 半径設定
    //! @param [in] radius 半径
    //-----------------------------------------------------------------------
    void setRadius(f32 radius);

    //-----------------------------------------------------------------------
    //! @brief  半径取得
    //! @return 現在の半径
    //-----------------------------------------------------------------------
    f32 getRadius() const;

private:
    f32 radius_ = 0.0f;   //!< 半径
};

//===========================================================================
//! 直線 Line / Ray / Line segment
//===========================================================================
struct Line3D : public ShapeBase3D
{
    //! @brief コンストラクタ
    Line3D();

    //-----------------------------------------------------------------------
    //! @brief コンストラクタ
    //! @param [in] start 始点
    //! @param [in] end   終点
    //-----------------------------------------------------------------------
    Line3D(const Vector3& start, const Vector3& end);

    //-----------------------------------------------------------------------
    //! @brief 位置取得
    //! @param  [in] index 0=始点, 1=終点
    //! @return 引数にあった位置
    //-----------------------------------------------------------------------
    Vector3 getPosition(s32 index) const;

protected:
    Vector3 position_[2]{};   //!< 始点、終点
};

//===========================================================================
//! 線分
//===========================================================================
struct LineSegment3D : public Line3D
{
    //! @brief コンストラクタ
    LineSegment3D();

    //-----------------------------------------------------------------------
    //! @brief コンストラクタ
    //! @param [in] start 始点
    //! @param [in] end   終点
    //-----------------------------------------------------------------------
    LineSegment3D(const Vector3& start, const Vector3& end);

    //-----------------------------------------------------------------------
    //! @brief パラメーターtと渡して実際の座標を求める
    //! @param  [in] 求めたい位置 (Min : 0.0, Max : 1.0)
    //! @return 求めた位置
    //-----------------------------------------------------------------------
    Vector3 getPosition(f32 t) const;
};

//===========================================================================
//! カプセル
//===========================================================================
struct Capsule3D : public ShapeBase3D
{
    //! @brief コンストラクタ
    Capsule3D();

    //-----------------------------------------------------------------------
    //! @brief コンストラクタ
    //! @param [in] start 始点
    //! @param [in] end   終点
    //-----------------------------------------------------------------------
    Capsule3D(const Vector3& start, const Vector3& end);

    //-----------------------------------------------------------------------
    //! @brief  線分のパラメーターtと渡して実際の座標を求める
    //! @param  [in] 求めたい位置 (Min : 0.0, Max : 1.0)
    //! @return 求めた位置
    //-----------------------------------------------------------------------
    Vector3 getPosition(f32 t) const;

    //-----------------------------------------------------------------------
    //! @brief  半径取得
    //! @return 半径
    //-----------------------------------------------------------------------
    f32 getRadius() const;

private:
    LineSegment3D lineSegment_{};   //!< 線分
    f32           radius_ = 0.0f;   //!< 半径
};

//================================================================================
//! 平面 Plane
//	Ax + By + Cz + D = 0
//================================================================================
struct Plane3D : public ShapeBase3D
{
    //! @brief コンストラクタ
    Plane3D();

    //! @brief コピーコストラクタ
    Plane3D(const Plane3D& other);

    //! @brief コンストラクタ (法線ベクトル と 代表点1点)
    Plane3D(const Vector3& normal, const Vector3& p);

    //! @brief コンストラクタ (代表点3点)
    Plane3D(const Vector3& a, const Vector3& b, const Vector3& c);

    //! @brief 初期化 (法線ベクトル と 代表点1点)
    void initialize(const Vector3& normal, const Vector3& p);

    //! @brief  法線取得
    //! @return 法線
    Vector3 getNormal() const;

private:
    union
    {
        struct
        {
            f32 a_;
            f32 b_;
            f32 c_;
            f32 d_;
        };
        struct
        {
            Vector3 normal_;
            f32     distance_;
        };
    };
};

//===========================================================================
//! 三角形
//===========================================================================
struct Triangle3D : public Plane3D
{
    //! @brief コンストラクタ
    Triangle3D();

    //! @brief コピーコンストラクタ
    Triangle3D(const Triangle3D& other);

    //! @brief コンストラクタ (代表点3点)
    Triangle3D(const Vector3& a, const Vector3& b, const Vector3& c);

	//-----------------------------------------------------------------------
    //! @brief  位置取得
    //! @param  [in] 取得したい位置番号
    //! @return 位置
	//-----------------------------------------------------------------------
    Vector3 getPosition(s32 index) const;

private:
    Vector3 position_[3]{};   //!< 頂点座標
};

//===========================================================================
//! 四角形
//===========================================================================
struct Rectangle : public ShapeBase3D
{
    //! @brief コンストラクタ
    Rectangle();

    //! @brief コンストラクタ (代表点4点)
    Rectangle(const Vector3& a, const Vector3& b, const Vector3& c, const Vector3& d);

private:
    Vector3 vertexPosition_[4]{};   //!< 頂点座標
};

//===========================================================================
//! ボックス
//===========================================================================
struct Box3D : public ShapeBase3D
{
    //                //
    //            max //
    //    |------|    //
    //    |------|    //
    //    |------|    //
    // min		      //
    //                //

    //! @brief デフォルトコンストラクタ
    Box3D();

    //-----------------------------------------------------------------------
    //! @brief コンストラクタ
    //! @param [in] min
    //! @param [in] max minの対角線の点
    //-----------------------------------------------------------------------
    Box3D(const Vector3& min, const Vector3& max);

    //-----------------------------------------------------------------------
    //! @biref  サイズ設定
    //! @param [in] min
    //! @param [in] max minの対角線の点
    //-----------------------------------------------------------------------
    void setSize(const Vector3& min, const Vector3& max);

    //-----------------------------------------------------------------------
    //! @biref  位置取得
    //! @param  [in] index 0=min, 1=max
    //! @return indexに応じた場所
    //-----------------------------------------------------------------------
    Vector3 getPosition(s32 index) const;

public:
    Vector3 position_[2]{};   //!< min, max
};