//===========================================================================
//! @file	shape_2D.h
//! @brief	2D 当たり判定形状定義
//===========================================================================
#pragma once

//! 2D 当たり判定形状定義
enum class ShapeType2D : s32
{
    None = 0,      //!< 初期化用
    Point,         //!< 点
    Circle,        //!< 円
    LineSegment,   //!< 線分
    Rect,          //!< 矩形

    TYPE_MAX
};

//===========================================================================
//! 2D形状基底
//===========================================================================
struct ShapeBase2D : public ShapeTypeBase
{
    //! @brief コンストラクタ
    ShapeBase2D() = default;

    //-----------------------------------------------------------------------
    //! @brief 当たり判定形状取得
    //!	@return	自身の2D形状タイプ
    //-----------------------------------------------------------------------
    ShapeType2D getShapeType() const;

protected:
    //! 各コンストラクタで初期化
    ShapeType2D shapeType_ = ShapeType2D::None;   //!< 形状
};

//===========================================================================
//! ポイント(点)
//===========================================================================
struct Point2D : public ShapeBase2D
{
    //! @brief コンストラクタ
    Point2D();

    //! @brief コンストラクタ
    Point2D(const Vector2& position);

    //-----------------------------------------------------------------------
    //! @biref 位置設定
    //! @param [in] 設定したい位置
    //-----------------------------------------------------------------------
    void setPosition(const Vector2& position);

    //-----------------------------------------------------------------------
    //! @brief 位置取得
    //! return 現在の位置
    //-----------------------------------------------------------------------
    Vector2 getPosition() const;

private:
    Vector2 position_ = Vector2::ZERO;   //!< 位置
};

//===========================================================================
//! 円
//===========================================================================
struct Circle2D : public Point2D
{
    //! @brief コンストラクタ
    Circle2D();

    //! @brief コンストラクタ
    Circle2D(f32 radius);

    //-----------------------------------------------------------------------
    //! @brief 半径設定
    //! @param [in] radius 半径
    //-----------------------------------------------------------------------
    void setRadius(f32 radius);

    //-----------------------------------------------------------------------
    //! @brief  半径取得
    //! @return 半径
    //-----------------------------------------------------------------------
    f32 getRadius() const;

private:
    f32 radius_ = 1.0f;   //!< 半径
};

//===========================================================================
//! 線分
//===========================================================================
struct LineSegment2D : public ShapeBase2D
{
    //! @brief コンストラクタ
    LineSegment2D();

    //-----------------------------------------------------------------------
    //! @brief コンストラクタ
    //! @param [in] start 始点
    //! @param [in] end	  終点
    //-----------------------------------------------------------------------
    LineSegment2D(const Vector2& start, const Vector2& end);

	//-----------------------------------------------------------------------
	//! @brief パラメーターtと渡して実際の座標を求める
	//! @param  [in] 求めたい位置 (Min : 0.0, Max : 1.0)
	//! @return 求めた位置
	//-----------------------------------------------------------------------
	Vector2 getPosition(f32 t) const;

private:
    Vector2 position_[2]{};   //!< 始点, 終点
};

//===========================================================================
//! 矩形
//===========================================================================
struct Rect2D : public ShapeBase2D
{
    //! @brief コンストラクタ
    Rect2D();

    //-----------------------------------------------------------------------
    //! @brief コンストラクタ
    //! @param [in] position 中心位置
    //! @param [in] w        幅
    //! @param [in] h        高さ
    //-----------------------------------------------------------------------
    Rect2D(const Vector2& position, f32 w, f32 h);

    //! @brief 位置取得
    Vector2 getPosition() const;

    //! @brief 幅取得
    f32 getW() const;

    //! @brief 高さ取得
    f32 getH() const;

    //-----------------------------------------------------------------------
    //! @brief  サイズ取得
    //! @return x_=幅、 y_=高さ
    //-----------------------------------------------------------------------
    Vector2 getSize() const;

private:
    Vector2 position_ = Vector2::ZERO;   //!< 中心点
    f32     w_        = 0.0f;            //!< 幅
    f32     h_        = 0.0f;            //!< 高さ
};
