//===========================================================================
//! @file	light_base.h
//! @brife  全ライトの基底クラス
//===========================================================================
#pragma once

//! ライトの種類
enum class LightType : u32
{
    None = 0,

    DirectionalLight,
    PointLight,
    SpotLight,

    Max
};

//===========================================================================
//! @class Light
//===========================================================================
class Light : public ObjectBase
{
public:
	//-----------------------------------------------------------------------
    //!	@name 初期化
    //-----------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    Light() = default;

    //!@brief デストラクタ
    virtual ~Light() override = default;

    //@}
	//-----------------------------------------------------------------------
    //!	@name タスク
	//-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
	//! @brief 初期化
	//! @return true  正常終了
	//! @return false エラー終了
	//-----------------------------------------------------------------------
    virtual bool initialize() override;

    //! @brief 更新
    virtual void update() override;

    //! @brief 描画
    virtual void render() override;

    //! @brief 解放
    virtual void cleanup() override;

    //@}
	//-----------------------------------------------------------------------
    //!	@name 設定
	//-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief ライトの注視点設定
	//! @param [in] lookAt 注視点
	//-----------------------------------------------------------------------
    void setLookAt(const Vector3& lookAt);

	//-----------------------------------------------------------------------
    //! @brief ライトの色設定
	//! @param [in] color 色
	//-----------------------------------------------------------------------
    void setColor(const Vector4& color);

	//-----------------------------------------------------------------------
    //! @brief ライトの強度(明るさ)設定
	//! @param [in] intensity 明るさ
	//-----------------------------------------------------------------------
    void setIntensity(f32 intensity);

	//-----------------------------------------------------------------------
	//! @brief 自身の番号設定 (imguiの表示で使ってる)
	//! @param [in] index 自身の番号
	//-----------------------------------------------------------------------
	void setIndex(s32 index);

	//-----------------------------------------------------------------------
	//! @brief アクティブ状態にするか
	//! @param [in] flag      true=アクティブ, false=非アクティブ
	//-----------------------------------------------------------------------
	void isActive(bool flag);

	//-----------------------------------------------------------------------
    //! @brief 削除用
	//! @param [in] flag      true=削除, false=削除しない
	//-----------------------------------------------------------------------
    void isRemove(bool flag);

    //@}
	//-----------------------------------------------------------------------
    //!	@name 取得
	//-----------------------------------------------------------------------
    //@{

    //! @brief ライトの種類取得
    LightType getLightType() const;

    //! @brief ライトの注視点取得
    Vector3 getLookAt() const;

    //! @brief ライトの色取得
    Vector4 getColor() const;

    //! @brief ライトの強度取得
    f32 getIntensity() const;

    //! @brief ライトのビュー行列取得
    Matrix getMatView() const;

	//-----------------------------------------------------------------------
    //! @brief ライトのプロジェクション行列取得(関数内で作成)
	//!	@param	[in]	left	ウィンドウ幅
	//!	@param	[in]	right	ウィンドウ高さ
	//!	@param	[in]	top		ウィンドウ幅
	//!	@param	[in]	bottom	ウィンドウ幅
	//!	@param	[in]	zNear	カメラ前
	//!	@param	[in]	zFar	カメラ奥行き	
	//-----------------------------------------------------------------------
    Matrix getMatProj(f32 left, f32 right, f32 top, f32 bottom, f32 zNear, f32 zFar) const;

    //! @brief 自身の番号取得
    s32 getIndex() const;

	//! @brief アクティブ状態取得
	bool isActive() const;

    //! @brief 削除用フラグ取得
    bool isRemove() const;

    //@}

protected:
    LightType lightType_;   //!< ライトの種類

    Vector3 lookAt_    = Vector3::ZERO;   //!< ライトの注視点
    Vector4 color_     = Vector4::ONE;    //!< ライトの色
    f32     intensity_ = 8.0f;            //!< ライトの強度(明るさ)

    s32  index_    = -1;
    bool isActive_ = false;
    bool isRemove_ = false;
};
