#include "light_base.h"
//===========================================================================
//! @file	light_base.cpp
//! @brife	平行光源
//===========================================================================

//---------------------------------------------------------------------------
//! 初期化
//---------------------------------------------------------------------------
bool Light::initialize()
{
    return true;
}

//---------------------------------------------------------------------------
//! 更新
//---------------------------------------------------------------------------
void Light::update()
{
}

//---------------------------------------------------------------------------
//! 描画
//---------------------------------------------------------------------------
void Light::render()
{
}

//---------------------------------------------------------------------------
//! 解放
//---------------------------------------------------------------------------
void Light::cleanup()
{
    //ObjectBase::cleanup();
}

//---------------------------------------------------------------------------
//! ライトの注視点設定
//---------------------------------------------------------------------------
void Light::setLookAt(const Vector3& lookAt)
{
    lookAt_ = lookAt;
}

//---------------------------------------------------------------------------
//! ライトの色設定
//---------------------------------------------------------------------------
void Light::setColor(const Vector4& color)
{
    color_ = color;
}

//---------------------------------------------------------------------------
//! ライトの強度(明るさ)設定
//---------------------------------------------------------------------------
void Light::setIntensity(f32 intensity)
{
    intensity_ = intensity;
}

//---------------------------------------------------------------------------
//! 自身の番号設定
//---------------------------------------------------------------------------
void Light::setIndex(s32 index)
{
    index_ = index;
}

//---------------------------------------------------------------------------
//! アクティブ状態にするか
//---------------------------------------------------------------------------
void Light::isActive(bool flag)
{
    isActive_ = flag;
}

//---------------------------------------------------------------------------
//! 削除用
//---------------------------------------------------------------------------
void Light::isRemove(bool flag)
{
    isRemove_ = flag;
}

//---------------------------------------------------------------------------
//! ライトの種類取得
//---------------------------------------------------------------------------
LightType Light::getLightType() const
{
    return lightType_;
}

//---------------------------------------------------------------------------
//! ライトの注視点取得
//---------------------------------------------------------------------------
Vector3 Light::getLookAt() const
{
    return lookAt_;
}

//---------------------------------------------------------------------------
//! ライトの色取得
//---------------------------------------------------------------------------
Vector4 Light::getColor() const
{
    return color_;
}

//---------------------------------------------------------------------------
//! ライトの強度取得
//---------------------------------------------------------------------------
f32 Light::getIntensity() const
{
    return intensity_;
}

//---------------------------------------------------------------------------
//! ライトのビュー行列取得
//---------------------------------------------------------------------------
Matrix Light::getMatView() const
{
    Matrix m = Matrix::identity();

    Vector3 axisZ = (position_ - lookAt_).normalize();
    //Vector3 axisZ = (lookAt_ - position_).normalize();
    Vector3 axisX = Vector3::cross(Vector3(0.0f, 1.0f, 0.0f), axisZ).normalize();
    Vector3 axisY;

    if(axisX.lengthSq() <= 0.0000001f) {
        axisX = Vector3::cross(Vector3(1.0f, 0.0f, 0.0f), axisZ).normalize();
    }

    axisY = Vector3::cross(axisZ, axisX);

    //=============================================================
    // ビュー行列を計算
    //=============================================================
    m.m_[0][0] = axisX.x_;
    m.m_[0][1] = axisY.x_;
    m.m_[0][2] = axisZ.x_;
    m.m_[0][3] = 0.0f;

    m.m_[1][0] = axisX.y_;
    m.m_[1][1] = axisY.y_;
    m.m_[1][2] = axisZ.y_;
    m.m_[1][3] = 0.0f;

    m.m_[2][0] = axisX.z_;
    m.m_[2][1] = axisY.z_;
    m.m_[2][2] = axisZ.z_;
    m.m_[2][3] = 0.0f;

    m.m_[3][0] = Vector3::dot(position_, axisX) * -1.0f;
    m.m_[3][1] = Vector3::dot(position_, axisY) * -1.0f;
    m.m_[3][2] = Vector3::dot(position_, axisZ) * -1.0f;
    m.m_[3][3] = 1.0f;

    return m;
}

//---------------------------------------------------------------------------
//! ライトのプロジェクション行列取得
//---------------------------------------------------------------------------
Matrix Light::getMatProj(f32 left, f32 right, f32 top, f32 bottom, f32 zNear, f32 zFar) const
{
    if constexpr(true) {
        // 仮対応
        left   = 0.0f;
        right  = 1280.0f;
        top    = 0.0f;
        bottom = 720.0f;
    }

    if constexpr(true) {
        return DirectX::XMMatrixOrthographicLH(30.0f, 30.0f, 0.1f, 200.0f);
    }
    else {
        const f32 w = right - left;
        const f32 h = top - bottom;
        const f32 z = zFar - zNear;

        const f32 tx = -(right + left) / w;
        const f32 ty = -(top + bottom) / h;
        const f32 tz = -(zFar + zNear) / z;

        Matrix m = Matrix::identity();

        m.m_[0][0] = 2.0f / h;
        m.m_[1][1] = 2.0f / w;
        m.m_[2][2] = -2.0f / z;

        m.m_[3][0] = tx;
        m.m_[3][1] = ty;
        m.m_[3][2] = tz;
        m.m_[3][3] = 1.0f;

        return m;
    }
}

//---------------------------------------------------------------------------
//! 自身の番号取得
//---------------------------------------------------------------------------
s32 Light::getIndex() const
{
    return index_;
}

//---------------------------------------------------------------------------
//! アクティブ状態取得
//---------------------------------------------------------------------------
bool Light::isActive() const
{
    return isActive_;
}

//---------------------------------------------------------------------------
//! 削除用フラグ取得
//---------------------------------------------------------------------------
bool Light::isRemove() const
{
    return isRemove_;
}