//===========================================================================
//!	@file	gpu_inputLayout.h
//!	@brief	入力レイアウト
//===========================================================================
#pragma once

//===========================================================================
//!	@namespace	gpu
//===========================================================================
namespace gpu {

//! 前方宣言
class ShaderVs;

//===========================================================================
//!	@class	InputLayout
//===========================================================================
class InputLayout
{
public:
    //-----------------------------------------------------------------------
    //!	@name	初期化
    //-----------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    template<int N>
    InputLayout(const D3D11_INPUT_ELEMENT_DESC (&desc)[N])
    {
        desc_.resize(N);
        for(u32 i = 0; i < N; ++i) {
            desc_[i] = desc[i];
        }
    }

    //! @brief デストラクタ
    virtual ~InputLayout() = default;

    //@}
    //-----------------------------------------------------------------------
    //!	@name	タスク
    //-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief 作成
	//! @param [in] shaderVs 頂点シェーダー
	//! @return true  作成成功
	//! @return false 作成失敗
	//-----------------------------------------------------------------------
    bool create(const gpu::ShaderVs& shaderVs);

	//-----------------------------------------------------------------------
    //! @brief  D3D入力レイアウトを取得
	//! @return 頂点レイアウト
	//-----------------------------------------------------------------------
    ID3D11InputLayout* getInputLayout();

    //@}

private:
    std::vector<D3D11_INPUT_ELEMENT_DESC> desc_;
    com_ptr<ID3D11InputLayout>            inputLayout_;
};

}   // namespace gpu
