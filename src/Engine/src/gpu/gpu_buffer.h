//===========================================================================
//!	@file	gpu_buffer.h
//!	@brief	GPUバッファー
//===========================================================================
#pragma once

#include "system/directX.h"         // DirectX11

//===========================================================================
//!	@namespace	gpu
//===========================================================================
namespace gpu {

//===========================================================================
//!	@class	Buffer
//===========================================================================
class Buffer
{
public:
    //-----------------------------------------------------------------------
    //!	@name	初期化
    //-----------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    Buffer() = default;

    //! @brief デストラクタ
    virtual ~Buffer() = default;

    //@}
    //-----------------------------------------------------------------------
    //!	@name	タスク
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief 初期化
    //!	@param	[in]	size		バッファサイズ(単位:byte)
    //!	@param	[in]	usage		用途
    //!	@param	[in]	bindFlags	設定先属性
    //!	@param	[in]	initialData	初期データー(nullptrの場合はなし)
    //! @return true	正常終了
    //! @return false	エラー終了
    //-----------------------------------------------------------------------
    bool initialize(size_t size, D3D11_USAGE usage, D3D11_BIND_FLAG bindFlags, const void* initialData = nullptr);

    //@}
    //-----------------------------------------------------------------------
    //!	@name	取得
    //-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief  D3Dバッファを取得
    //! @return バッファの生ポインタ
	//-----------------------------------------------------------------------
    ID3D11Buffer* getD3DBuffer() const { return d3dBuffer_.Get(); }

    //@}

private:
    com_ptr<ID3D11Buffer> d3dBuffer_;   //!< バッファ保存用
};

//===========================================================================
//!	@class	ConstantBuffer
//===========================================================================
template<typename T>
class ConstantBuffer final : public Buffer
{
public:
    //-----------------------------------------------------------------------
    //!	@name	初期化
    //-----------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    ConstantBuffer() = default;

    //! @brief デストラクタ
    ~ConstantBuffer() override = default;

    //-----------------------------------------------------------------------
    //!	@name	タスク
    //-----------------------------------------------------------------------
    //@{

    //! @brief 更新開始
    T* begin()
    {
        // 初回実行時はバッファを作成
        if(!getD3DBuffer()) {
            create();
        }

        // バッファをmapする
        auto                     d3dBuffer = getD3DBuffer();
        D3D11_MAPPED_SUBRESOURCE data;
        device::D3DContext()->Map(d3dBuffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &data);

        return reinterpret_cast<T*>(data.pData);
    }

    //! @brief 更新終了
    void end()
    {
        // バッファをunmapする
        auto d3dBuffer = getD3DBuffer();
        device::D3DContext()->Unmap(d3dBuffer, 0);
    };

private:
    //! @brief バッファ作成
    bool create()
    {
        auto size = (sizeof(T) + 15) & 0xfffffff0UL;   // 16の倍数に切り上げ
        if(!initialize(size, D3D11_USAGE_DYNAMIC, D3D11_BIND_CONSTANT_BUFFER)) {
            return false;
        }
        return true;
    }

    //@}
};

}   // namespace gpu
