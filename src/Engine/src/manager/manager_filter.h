//===========================================================================
//! @file   filter_manager.h
//!	@brief	描画に使用するフィルター管理
//===========================================================================
#pragma once

//===========================================================================
//!	@class FilterManager
//===========================================================================
class FilterManager
{
public:
    //-----------------------------------------------------------------------
    //!	@name	初期化
    //-----------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    FilterManager() = default;

    //! @brief デストラクタ
    ~FilterManager() = default;

    //@}
    //-----------------------------------------------------------------------
    //!	@name	タスク
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief 初期化
    //! @return true  正常終了
    //! @return false エラー終了
    //-----------------------------------------------------------------------
    bool initialize();

    //! @brief フィルタ更新
    void begin();

    //! @brief 解放
    void cleanup();

    //! @brief アプリ側で使用しているフィルタ開放
    void appFilterCleanup();

    //@}
    //-----------------------------------------------------------------------
    //!	@name	設定
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief 使用するフィルタ設定
    //!	@param	[in]	filterType	使用したいフィルタタイプ
    //-----------------------------------------------------------------------
    void setFilter(FilterType filterType);

    //-----------------------------------------------------------------------
    //! @brief 使用するフィルタ解除
    //!	@param	[in]	filterType	削除したいフィルタタイプ
    //-----------------------------------------------------------------------
    void removeFilter(FilterType filterType);

    //@}
    //-----------------------------------------------------------------------
    //!	@name	取得
    //-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief HDR中かどうか
	//! @return true   HDR有効
	//! @return false  HDR無効
	//-----------------------------------------------------------------------
    bool isHDR() const;

    //@}

private:
    //-----------------------------------------------------------------------
    //!	@name	追加
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief フィルタ追加
    //!	@param	[in]	filterType	配列に追加するフィルタタイプ
    //-----------------------------------------------------------------------
    void addFilter(FilterType filterType);

    //! @brief ガウシアンぼかしフィルタ作成
    Filter* createGaussianBlur();

    //! @brief トーンマッピングフィルタ作成
    Filter* createToneMapping();

    //@}

private:
    std::list<std::shared_ptr<Filter>> filters_;         //!< 保存用
    std::list<std::weak_ptr<Filter>>   appUsefilters_;   //!< アプリ側で使うフィルタ

    // なおすかｍ
    bool isHDR_ = true;
};