//===========================================================================
//! @file	camera_manager.h
//!	@brief	カメラ管理システム
//===========================================================================
#pragma once

//! 前方宣言
class ShadowMap;

//===========================================================================
//!	@class CameraManager
//===========================================================================
class CameraManager : ManagerBase
{
public:
    //-----------------------------------------------------------------------
    //!	@name 初期化
    //-----------------------------------------------------------------------
    //@{

    //!	@brief コンストラクタ
    CameraManager() = default;

    //!	@brief デストラクタ
    ~CameraManager() override = default;

    //@}
    //-----------------------------------------------------------------------
    //!	@name タスク
    //-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief 初期化
	//! @return true  正常終了
	//! @return false エラー終了
	//-----------------------------------------------------------------------
    bool initialize() override;

    //! @brief 更新
    void update() override;

    //! @brief アクティブカメラの定数バッファ転送
    void cbTransferActiveCamera();

    //! @brief 登録されている全カメラの定数バッファ転送
    void cbTransferAllCamera();

    //! @brief 解放
    void cleanup() override;

	//-----------------------------------------------------------------------
    //!	@brief カメラ追加
	//! @param [in] camera 追加したいカメラ
	//-----------------------------------------------------------------------
    void addCamera(Camera* const camera);

	//-----------------------------------------------------------------------
    //!	@brief カメラ追加
	//! @param [in] position 位置
	//! @param [in] lookAt   注視点
	//! @param [in] worldUp  カメラの上ベクトル
	//-----------------------------------------------------------------------
    void addCamera(const Vector3& position, const Vector3& lookAt, const Vector3& worldUp = Vector3(0.0f, 1.0f, 0.0f));

    // @brief ImGui
    void showImGuiWindow();

    //@}
    //-----------------------------------------------------------------------
    //!	@name 取得
    //-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief 対応しているカメラのポインタ取得
	//! @return アクティブカメラのポインタ
	//-----------------------------------------------------------------------
    Camera* getActiveCamera() const;

	//-----------------------------------------------------------------------
    //! @brief 対応しているカメラのビュー行列取得
	//! @return アクティブカメラのビュー行列
	//-----------------------------------------------------------------------
    Matrix getActiveCameraMatView() const;

	//-----------------------------------------------------------------------
    //! @brief 対応しているカメラの投影行列取得
	//! @return アクティブカメラの投影行列
	//-----------------------------------------------------------------------
    Matrix getActiveCameraMatProj() const;

    //@}

private:
    std::unique_ptr<KeyInput>     inputKey_;      //!< キー入力
    gpu::ConstantBuffer<cbCamera> cbCamera_;      //!< 定数バッファ
    s32                           gpuSlot_ = 0;   //!< GPUスロット番号

    std::vector<std::unique_ptr<Camera>> cameras_;                  //!< カメラのポインタ配列
    s32                                  activeCameraIndex_ = -1;   //!< アクティブ状態のカメラ番号
};
