//===========================================================================
//!	@file	scene_manager.h
//!	@brief	シーン管理システム
//===========================================================================
#pragma once

//===========================================================================
//!	@class SceneManager
//===========================================================================
class SceneManager
{
public:
	//-----------------------------------------------------------------------
    //!	@name	初期化
	//-----------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    SceneManager() = default;

    //! @brief デストラクタ
    virtual ~SceneManager() = default;

    //@}
	//-----------------------------------------------------------------------
    //!	@name	タスク
	//-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief 初期化
	//! @return true  正常終了
	//! @return false エラー終了
	//-----------------------------------------------------------------------
    virtual bool initialize();

    //! @brief 更新
	virtual void update(f32 deleteTime);

    //! @brief 描画
	virtual void render();

    //! @brief 描画(モード指定)
	virtual void render(RenderMode renderMode);

    //! @brief 解放
	virtual void cleanup();

	//! @brief アクティブシーンのImGui描画
	virtual void showImGuiWindow();

    //@}
	//-----------------------------------------------------------------------
    //!	@name	設定
	//-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief 次のシーンを設定
	//! @param [in] 次のシーンのポインタ
	//-----------------------------------------------------------------------
	virtual void setNextScene(SceneBase* nextScene);

    //@}
	//-----------------------------------------------------------------------
    //!	@name	取得
    //-----------------------------------------------------------------------
    //@{

    //! @brief 現在のシーンの終了確認
	virtual bool activeSceneIsEnd() const;
	
    //@}

protected:
    std::unique_ptr<SceneBase>   activeScene_;   //!< 現在のシーン
    std::unique_ptr<SceneBase>   nextScene_;     //!< 次のシーン
};