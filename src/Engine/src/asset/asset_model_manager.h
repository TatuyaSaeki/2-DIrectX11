//===========================================================================
//! @file	asset_model_manager.h
//!	@brief	アセットモデル管理クラス
//===========================================================================
#pragma once

//! モデル種類
enum class ModelType : u32
{
    None = 0,   //!< まよい
    Box,        //!< ボックス
    Cerberus,   //!< 銃
    Knight,     //!< 騎士
};

//===========================================================================
//! @clsss AssetModelManager
//===========================================================================
class AssetModelManager
{
public:
    //---------------------------------------------------------------------------
    //!	@name	初期化
    //---------------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    AssetModelManager() = default;

    //! @brief デストラクタ
    ~AssetModelManager();

    //@}
    //---------------------------------------------------------------------------
    //!	@name	タスク
    //---------------------------------------------------------------------------
    //@{

    //! @brief 初期化
    bool initialize();

    //! @brief 解放
    void cleanup();

    //@}
    //---------------------------------------------------------------------------
    //!	@name	取得
    //---------------------------------------------------------------------------
    //@{

	//--------------------------------------------------------------------------
    //! @brief モデル取得
    //!	@param	[in]	fileName	ファイル名
    //!	@return	モデルのポインタ(受け取りはweak_ptrで), 失敗でnullptr
	//--------------------------------------------------------------------------
    std::shared_ptr<AssetModel> getModel(const std::string& fileName);

    //@}

private:
	//--------------------------------------------------------------------------
    //!	@brief モデル作成
    //!	@param	[in]	fileName	ファイル名
    //!	@return	モデルのポインタ, 作成失敗でnullptr
	//--------------------------------------------------------------------------
    AssetModel* createModel(const std::string& fileName);

	//--------------------------------------------------------------------------
    //!	@brief 配列にモデルを追加
    //! @param	[in]	fileName	ファイル名
	//--------------------------------------------------------------------------
    void addModel(const std::string& fileName, AssetModel* const assetModel);

private:
    std::unordered_map<std::string, std::shared_ptr<AssetModel>> assetModels_;   //!< モデル配列
};