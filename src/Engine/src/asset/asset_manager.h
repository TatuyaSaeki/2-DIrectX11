//===========================================================================
//! @file	AssetManager.h
//! @brief	アセット全般管理用クラス
//===========================================================================
#pragma once

//===========================================================================
//! @class AssetManager
//===========================================================================
class AssetManager
{
public:
    //-----------------------------------------------------------------------
    //!	@name シングルトン
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief インスタンス取得
    //! @return 参照インスタンス
    //-----------------------------------------------------------------------
    static AssetManager& getInstance();

    //@}
    //-----------------------------------------------------------------------
    //!	@name 初期化
    //-----------------------------------------------------------------------
    //@{

private:
    //! @brief コンストラクタ
    AssetManager();

public:
    // @brief デストラクタ
    ~AssetManager() = default;

    //@}
    //-----------------------------------------------------------------------
    //!	@name 取得
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief モデル取得
    //! @param	[in]	filePath	取得したいモデルファイル名(ファイル名だけでOK)
    //! @return	モデルのポインタ(受け取る側は、weak_ptr)
    //-----------------------------------------------------------------------
    std::shared_ptr<AssetModel> getModel(const std::string& filePath) const;

    //-----------------------------------------------------------------------
    //! @brief システムテクスチャ取得
    //! @param	[in]	type		取得したいシステムテクスチャタイプ
    //! @return	テクスチャのポインタ(受け取る側は、weak_ptr)
    //-----------------------------------------------------------------------
    std::shared_ptr<gpu::Texture> getSystemTexture(SYSTEM_TEXTURE type) const;

    //-----------------------------------------------------------------------
    //! @brief テクスチャ取得
    //! @param	[in]	filePath	取得したいテクスチャファイル名(ファイル名だけでOK)
    //! @param	[in]	isCubemap	キューブマップかどうか(作成用に必要)
    //! @return	テクスチャのポインタ(受け取る側は、weak_ptr)
    //-----------------------------------------------------------------------
    std::shared_ptr<gpu::Texture> getTexture(const std::string& filePath, bool isCubemap = false) const;

    //@}

private:
    std::unique_ptr<AssetModelManager>   assetModelManager_;     //!< モデルマネージャー
    std::unique_ptr<AssetTextureManager> assetTextureManager_;   //!< テクスチャマネージャー
};

//===========================================================================
//!	namespace Asset
//===========================================================================
namespace Asset {

//-----------------------------------------------------------------------
//! @brief モデルの取得
//! @param	[in]	filePath	取得したいテクスチャファイル名(ファイル名だけでOK)
//! @return	モデルのポインタ(受け取る側は、weak_ptr)
//-----------------------------------------------------------------------
std::shared_ptr<AssetModel> getModel(const std::string& filePath);

//-----------------------------------------------------------------------
//! @brief システムテクスチャ取得
//! @param	[in]	type		取得したいシステムテクスチャタイプ
//! @return	テクスチャのポインタ(受け取る側は、weak_ptr)
//-----------------------------------------------------------------------
std::shared_ptr<gpu::Texture> getSystemTexture(SYSTEM_TEXTURE type);

//-----------------------------------------------------------------------
//! @brief テクスチャの取得
//! @param	[in]	filePath	取得したいテクスチャファイル名(ファイル名だけでOK)
//! @param	[in]	isCubemap	キューブマップかどうか(作成用に必要)
//! @return	テクスチャのポインタ(受け取る側は、weak_ptr)
//-----------------------------------------------------------------------
std::shared_ptr<gpu::Texture> getTexture(const std::string& filePath, bool isCubemap = false);
}   // namespace Asset