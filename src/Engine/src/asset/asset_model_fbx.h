//===========================================================================
//! @file	asset_model_fbx.h
//!	@brief	FBXアセットモデルクラス
//===========================================================================
#pragma once

//! 前方宣言
class MeshFBX;

//===========================================================================
//! @clsss AssetModelFBX
//===========================================================================
class AssetModelFBX : public AssetModel
{
public:
	//-----------------------------------------------------------------------
	//!	@name	初期化
	//-----------------------------------------------------------------------
	//@{

	//! @brief コンストラクタ
	AssetModelFBX() = default;

	//! @brief デストラクタ
	~AssetModelFBX() override = default;

	//@}
	//--------------------------------------------------------------------------
	//!	@name	タスク
	//--------------------------------------------------------------------------
	//@{

	//--------------------------------------------------------------------------
	//! @brief 初期化
	//! @param	[in]	fileName	ファイル名
	//--------------------------------------------------------------------------
	bool load(const std::string& fileName) override;

	//! @brief 解放
	void cleanup() override;

	//@}
};

//===========================================================================
//! @clsss MeshFBX
//===========================================================================
class MeshFBX : public Mesh
{
public:
	//-----------------------------------------------------------------------
	//! @name	タスク
	//-----------------------------------------------------------------------
	//@{

	//! @brief コンストラクタ
	MeshFBX() = default;

	//! @brief デストラクタ
	virtual ~MeshFBX() override = default;

	//@}
	//-----------------------------------------------------------------------
	//! @name	タスク
	//-----------------------------------------------------------------------
	//@{

	//-----------------------------------------------------------------------
	//! 初期化
	//!	@param	[in]	mesh		ofbx::Mesh
	//!	@param	[in]	filePath	ファイルパス
	//!	@return true	正常終了
	//!	@return false	エラー終了
	//-----------------------------------------------------------------------
	bool load(const ofbx::Mesh& mesh, const std::string& filePath);

	//@}

private:
	//-----------------------------------------------------------------------
	//! @name	読み込み
	//-----------------------------------------------------------------------
	//@{

	//--------------------------------------------------------------------------
	//! @brief 頂点読み込み
	//!	@param	[in]	geometry	ofbx::Geometry
	//--------------------------------------------------------------------------
	void loadVertices(const ofbx::Geometry& geometry);

	//--------------------------------------------------------------------------
	//! @brief 頂点インデックス番号読み込み
	//!	@param	[in]	geometry	ofbx::Geometry
	//--------------------------------------------------------------------------
	void loadIndices(const ofbx::Geometry& geometry);

	//--------------------------------------------------------------------------
	//! @brief 法線読み込み
	//!	@param	[in]	geometry	ofbx::Geometry
	//--------------------------------------------------------------------------
	void loadNormals(const ofbx::Geometry& geometry);

	//--------------------------------------------------------------------------
	//! @brief テクスチャUV読み込み
	//!	@param	[in]	geometry	ofbx::Geometry
	//--------------------------------------------------------------------------
	void loadUVs(const ofbx::Geometry& geometry);

	//! @brief 接線,従法線読み込み
	void loadTangentBinormals();

	//--------------------------------------------------------------------------
	//! @brief マテリアル読み込み
	//!	@param	[in]	mesh		ofbx::mesh
	//!	@param	[in]	filePath	ファイルパス
	//--------------------------------------------------------------------------
	void loadMaterials(const ofbx::Mesh& mesh, const std::string& filePath);

	//@}
};