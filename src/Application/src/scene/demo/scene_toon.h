//===========================================================================
//! @file	scene_toon.h
//!	@brief	デモシーン トゥーン
//===========================================================================
#pragma once

//===========================================================================
//!	@class SceneToon
//===========================================================================
class SceneToon : public DemoSceneBase
{
public:
    //-----------------------------------------------------------------------
    //!	@name	初期化
    //-----------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    SceneToon() = default;

    //! @brief デストラクタ
    ~SceneToon() override = default;

    //@}

private:
    //-----------------------------------------------------------------------
    //!	@name	初期化まとめてるだけ
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief ライト初期化
    //! @return true  正常終了
    //! @return false エラー終了
    //-----------------------------------------------------------------------
    bool initializeLight() override;

    //-----------------------------------------------------------------------
    //! @brief モデル初期化
    //! @return true  正常終了
    //! @return false エラー終了
    //-----------------------------------------------------------------------
    bool initializeModel() override;

    //@}

public:
    //-----------------------------------------------------------------------
    //!	@name	タスク
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief 初期化
    //! @return true  正常終了
    //! @return false エラー終了
    //-----------------------------------------------------------------------
    bool initialize() override;

    //! @brief 更新
    void update() override;

    //! @brief 描画
    void render() override;

    //-----------------------------------------------------------------------
    //! @brief 描画
    //! @param [in] renderMode 描画したいモード
    //-----------------------------------------------------------------------
    void render(RenderMode renderMode) override;

    //! @brief 解放
    void cleanup() override;

    //@}

private:
    std::shared_ptr<gpu::Texture> toonTexture_;    //!< トゥーン用テクスチャ
    std::shared_ptr<gpu::Texture> modelTexture_;   //!< トゥーン用テクスチャ

    // モデル
    std::unique_ptr<Object> modelFloor_;
    std::shared_ptr<Object> modelFbx1_;
    std::shared_ptr<Object> modelFbx2_;
};