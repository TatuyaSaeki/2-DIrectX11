//===========================================================================
//! @file	demo_scene_base.h
//!	@brief	デモシーンのベース
//===========================================================================
#pragma once

//! デモシーン種類
enum class DemoSceneType : u32
{
    None = 0,   //!< 初期化用
    Light,      //!< 平行光源⁺点光源⁺スポットライト
    Sea,        //!< 海
    Water,      //!< 水屈折
    //----
    SceneTypeMax   //!< シーンタイプ最大数
};

//! @namespace A_DemoSceneType
namespace A_DemoSceneType {

// ! @brief 現在のシーンタイプ設定
void setDemoSceneType(DemoSceneType sceneType);

//! @brief 現在のシーンタイプ取得
DemoSceneType getDemoSceneType();

}   // namespace A_DemoSceneType

//===========================================================================
//!	@class DemoSceneBase
//===========================================================================
class DemoSceneBase : public SceneBase
{
public:
    //-----------------------------------------------------------------------
    //!	@name	初期化
    //-----------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    DemoSceneBase();

    //! @brief デストラクタ
    virtual ~DemoSceneBase();

private:
    //-----------------------------------------------------------------------
    //!	@name	初期化
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief キー初期化
    //! @return true  正常終了
    //! @return fales エラー終了
    //-----------------------------------------------------------------------
    bool initializeKeyInput();

    //-----------------------------------------------------------------------
    //! @brief カメラマネージャー初期化
    //! @return true  正常終了
    //! @return fales エラー終了
    //-----------------------------------------------------------------------
    bool initializeCameraManager();

    //-----------------------------------------------------------------------
    //! @brief ライトマネージャー初期化
    //! @return true  正常終了
    //! @return fales エラー終了
    //-----------------------------------------------------------------------
    bool initializeLightManager();

    //-----------------------------------------------------------------------
    //! @brief タスクマネージャー初期化
    //! @return true  正常終了
    //! @return fales エラー終了
    //-----------------------------------------------------------------------
    bool initializeTaskManager();

    //@}

protected:
    //-----------------------------------------------------------------------
    //!	@name	初期化まとめてるだけ
    //-----------------------------------------------------------------------
    //@{

    //-----------------------------------------------------------------------
    //! @brief カメラ初期化
    //! @param [in] position カメラの初期位置
    //! @param [in] lookAt   カメラの初期注視点
    //-----------------------------------------------------------------------
    virtual bool initializeCameraFps(const Vector3& position, const Vector3& lookAt);

    //-----------------------------------------------------------------------
    //! @brief ライト初期化
    //! @return true  正常終了
    //! @return fales エラー終了
    //-----------------------------------------------------------------------
    virtual bool initializeLight();

    //-----------------------------------------------------------------------
    //! @brief モデル初期化
    //! @return true  正常終了
    //! @return fales エラー終了
    //-----------------------------------------------------------------------
    virtual bool initializeModel();

    //-----------------------------------------------------------------------
    //! @brief テクスチャ初期化
    //! @return true  正常終了
    //! @return fales エラー終了
    //-----------------------------------------------------------------------
    virtual bool initializeTexture();

    //@}
public:
    //-----------------------------------------------------------------------
    //!	@name	タスク
    //-----------------------------------------------------------------------
    //@{

    //! @brief 初期化
    virtual bool initialize() override { return true; }

    //! @brief 更新
    virtual void update(f32 deleteTime) override{};

    //! @brief 描画
    virtual void render() override{};

    //-----------------------------------------------------------------------
    //! @brief 描画
    //! @param	[in]	描画したいモード
    //-----------------------------------------------------------------------
    virtual void render(RenderMode renderMode) override;

    //! @brief 解放
    virtual void cleanup() override;

    //@}
    //-----------------------------------------------------------------------
    //!	@name	取得
    //-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief  平行光源取得
	//! @return 平行光源のポインタ
	//-----------------------------------------------------------------------
    Light* getDirectionalLight() const;

	//-----------------------------------------------------------------------
	//! @brief  現在のデモシーンタイプ取得
	//! @return 現在のデモシーンタイプ 
	//-----------------------------------------------------------------------
	DemoSceneType getDemoSceneType() const;

    //@}

protected:
    DemoSceneType demoSceneType_ = DemoSceneType::None;   //!< 自身のシーンタイプ

    std::unique_ptr<KeyInput>      inputKey_;        //!< 入力用
    std::unique_ptr<TaskManager>   taskManager_;     //!< タスクマネージャー
    std::unique_ptr<CameraManager> cameraManager_;   //!< カメラマネージャー
    std::unique_ptr<LightManager>  lightManager_;    //!< ライトマネージャー
};