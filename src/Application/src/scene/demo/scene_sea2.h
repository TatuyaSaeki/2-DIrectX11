//===========================================================================
//! @file	scene_sea2.h
//!	@brief	デモシーン 海2
//===========================================================================
#pragma once

//===========================================================================
//!	@class SceneSea2
//===========================================================================
class SceneSea2 : public DemoSceneBase
{
public:
	//-----------------------------------------------------------------------
    //!	@name	初期化
	//-----------------------------------------------------------------------
    //@{

    //! @brief コンストラクタ
    SceneSea2() = default;

    //! @brief デストラクタ
    ~SceneSea2() override = default;

    //@}

private:
	//-----------------------------------------------------------------------
    //!	@brief	初期化まとめてるだけ
	//-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief ライト初期化
	//! @return true  正常終了
	//! @return false エラー終了
	//-----------------------------------------------------------------------
    bool initializeLight() override;

	//-----------------------------------------------------------------------
    //! @brief モデル初期化
	//! @return true  正常終了
	//! @return false エラー終了
	//-----------------------------------------------------------------------
    bool initializeModel() override;

	//-----------------------------------------------------------------------
    //! @brief 波の数値初期化
	//! @return true  正常終了
	//! @return false エラー終了
	//-----------------------------------------------------------------------
    bool initializeWave();

    //@}

public:
	//-----------------------------------------------------------------------
    //!	@name	タスク
	//-----------------------------------------------------------------------
    //@{

	//-----------------------------------------------------------------------
    //! @brief 初期化
	//! @return true  正常終了
	//! @return false エラー終了
	//-----------------------------------------------------------------------
    bool initialize() override;

    //! @brief 更新
    void update(f32 deleteTime) override;

    //! @brief 描画
    void render() override;

	//-----------------------------------------------------------------------
    //! @brief 描画
	//! @param [in] renderMode 描画したいモード
	//-----------------------------------------------------------------------
    void render(RenderMode renderMode) override;

    //! @brief 解放
    void cleanup() override;

    //@}

private:
    std::shared_ptr<ObjectBaseModel> sea_;            //!< 海用モデル
    gpu::ConstantBuffer<cbSeaWave>   cbWave_;         //!< 定数バッファ
    const u32                        gpuSlot_ = 10;   //!< GPUスロット番号

    struct Wave
    {
        f32 speed_        = 0.01f;   //!< 進むスピード
        f32 moveDistance_ = 0.0f;    //!< 進んだ距離
        f32 fineness_     = 0.5f;    //!< 細かさ
        f32 sharp_        = 0.5f;    //!< 尖り度
        f32 height_       = 0.5f;    //!< 高さ
    };
    Wave wave_;

    std::shared_ptr<gpu::Texture> redTexture_;      //!< 赤テクスチャ
    std::shared_ptr<gpu::Texture> greenTexture_;    //!< 緑テクスチャ
    std::shared_ptr<gpu::Texture> textureBuffer_;   //!< 合成した結果を保存するバッファ

    std::shared_ptr<gpu::Texture> buffers_[3];
    s32                           bufferIndex_ = 0;

    std::shared_ptr<gpu::Texture> normalBuffer_;
};